# docker-compose up -d
services:
  db:
    image: postgres:12.8
    env_file:
      - .env.${ENV}
    container_name: "${DB_CONTAINER_NAME:-postgres_db_dev}"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - db_data_dev:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app_network
    restart: always

  kong:
    image: kong:latest
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "db"
      KONG_PG_PORT: 5432
      KONG_PG_USER: "postgres"
      KONG_PG_PASSWORD: "postgres"
      KONG_PG_DATABASE: "kong"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"        # admin api port
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl" # proxy port
    env_file:
      - .env.${ENV}
    container_name: "${KONG_GATEWAY_CONTAINER_NAME:-kong_container}"
    ports:
      - "${KONG_HTTP_PORT}:8000" # proxy port
      - "${KONG_HTTPS_PORT}:8443" # proxy port
      - "${KONG_ADMIN_PORT}:8001" # admin port
    volumes:
      - ../go-store-kong/kong.yml:/kong.yml # mounting from go-store-kong to kong container
    depends_on:
      - book
    networks:
      - app_network

  book:
    build:
      context: ../go-store-services/book-service
      dockerfile: Dockerfile
    env_file:
      - .env.${ENV}
    container_name: "${BOOK_CONTAINER_NAME:-book_container}"
    depends_on:
      - db
    ports:
      - "${BOOK_PORT:-8082}:8082"
    networks:
      - app_network
    restart: always

volumes:
  db_data_dev:

networks:
  app_network:
    driver: bridge
